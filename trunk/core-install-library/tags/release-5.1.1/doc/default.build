<?xml version="1.0"?>
<project name="Documentation for LANDIS-II main package" default="help">

    <include buildfile="../settings.build" />

    <!-- ================================================================== -->

    <target name="help"
            description="Display brief message on how to list available targets">
        <echo>Use NAnt's -projecthelp option to list the available targets</echo>
    </target>

    <property name="buildDir"
              value="build" />

    <!-- ================================================================== -->
    <!-- Main Targets -->

    <target name="build"
            description="Build the main page, copy stylesheet, check PDFs"
            depends="main-page,copy-stylesheet,check-pdfs" />

    <target name="main-page"
            description="Build documentation main page (index.html)"
            depends="check-build-dir">
        <copy file="index.html"
              todir="${buildDir}">
            <filterchain>
                <replacetokens>
                    <token key="VERSION"      value="${version}" />
                    <token key="MAJOR_MINOR"  value="${major.minor}" />
                    <token key="REL_ABBR"     value="${release.abbr}" />
                </replacetokens>
            </filterchain>
        </copy>
    </target>

    <target name="copy-stylesheet"
            description="Copy cascading stylesheet to build folder"
            depends="check-build-dir">
        <copy file="plone.css"
              todir="${buildDir}" />
    </target>

    <target name="check-pdfs"
            description="Check if PDFs exist and up-to-date relative to RTFs">

        <property name="model.desc"
                  value="LANDIS-II Model v${major.minor} Description" />
        <property name="model.userGuide"
                  value="LANDIS-II Model v${major.minor} User Guide" />

        <property name="titles"
                  value="${model.desc}|${model.userGuide}" />

        <echo>Checking status of PDFs relative to their RTF sources...</echo>

        <property name="rtf.missing"
                  value="false" />
        <property name="pdf.problem"
                  value="false" />
        <foreach item="String"
                 in="${titles}"
                 delim="|"
                 property="title">
            <echo></echo>
            <property name="title.rtf"
                      value="${title}.rtf" />
            <if test="${not file::exists(title.rtf)}">
                <echo>  "${title.rtf}" -- MISSING</echo>
                <property name="rtf.missing"
                          value="true" />
            </if>

            <property name="title.pdf"
                      value="${path::combine(buildDir, title + '.pdf')}" />
            <if test="${not file::exists(title.pdf)}">
                <property name="title.pdf.status"
                          value="MISSING" />
                <property name="pdf.problem"
                          value="true" />
            </if>
            <if test="${file::exists(title.rtf) and file::exists(title.pdf)}">
                <property name="title.pdf.uptodate"
                          value="${file::get-last-write-time(title.pdf) > file::get-last-write-time(title.rtf)}" />
                <property name="title.pdf.status"
                          value="up-to-date"
                          if="${title.pdf.uptodate}" />
                <if test="${not title.pdf.uptodate}">
                    <property name="title.pdf.status"
                              value="OUT OF DATE" />
                    <property name="pdf.problem"
                              value="true" />
                </if>
            </if>
            <echo>  "${title.pdf}" -- ${title.pdf.status}</echo>
        </foreach>

        <fail if="${rtf.missing}">
            One or more RTF source files are missing</fail>
        <fail if="${pdf.problem}">
            One or more PDFs are missing or out-of-date</fail>
    </target>

    <target name="clean"
            description="Remove intermediate files in build folder">
        <delete>
            <fileset>
                <include name="${buildDir}/*" />
            </fileset>
        </delete>
    </target>

    <!-- ================================================================== -->

    <target name="check-build-dir">
        <mkdir dir="${buildDir}"
               if="${not directory::exists(buildDir)}" />
    </target>

</project>
